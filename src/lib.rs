use sha2::{Digest, Sha256, Sha512};

static EMOJIS_LENGTH: u16 = 333;

static EMOJIS: [&str; 333] = [
    "😉", "😍", "😛", "😭", "😱", "😡", "😎", "😴", "😵", "😈", "😬", "😇", "😏", "👮", "👷", "💂",
    "👶", "👨", "👩", "👴", "👵", "😻", "😽", "🙀", "👺", "🙈", "🙉", "🙊", "💀", "👽", "💩", "🔥",
    "💥", "💤", "👂", "👀", "👃", "👅", "👄", "👍", "👎", "👌", "👊", "✌", "✋", "👐", "👆", "👇",
    "👉", "👈", "🙏", "👏", "💪", "🚶", "🏃", "💃", "👫", "👪", "👬", "👭", "💅", "🎩", "👑", "👒",
    "👟", "👞", "👠", "👕", "👗", "👖", "👙", "👜", "👓", "🎀", "💄", "💛", "💙", "💜", "💚", "💍",
    "💎", "🐶", "🐺", "🐱", "🐭", "🐹", "🐰", "🐸", "🐯", "🐨", "🐻", "🐷", "🐮", "🐗", "🐴", "🐑",
    "🐘", "🐼", "🐧", "🐥", "🐔", "🐍", "🐢", "🐛", "🐝", "🐜", "🐞", "🐌", "🐙", "🐚", "🐟", "🐬",
    "🐋", "🐐", "🐊", "🐫", "🍀", "🌹", "🌻", "🍁", "🌾", "🍄", "🌵", "🌴", "🌳", "🌞", "🌚", "🌙",
    "🌎", "🌋", "⚡", "☔", "❄", "⛄", "🌀", "🌈", "🌊", "🎓", "🎆", "🎃", "👻", "🎅", "🎄", "🎁",
    "🎈", "🔮", "🎥", "📷", "💿", "💻", "☎", "📡", "📺", "📻", "🔉", "🔔", "⏳", "⏰", "⌚", "🔒",
    "🔑", "🔎", "💡", "🔦", "🔌", "🔋", "🚿", "🚽", "🔧", "🔨", "🚪", "🚬", "💣", "🔫", "🔪", "💊",
    "💉", "💰", "💵", "💳", "✉", "📫", "📦", "📅", "📁", "✂", "📌", "📎", "✒", "✏", "📐", "📚",
    "🔬", "🔭", "🎨", "🎬", "🎤", "🎧", "🎵", "🎹", "🎻", "🎺", "🎸", "👾", "🎮", "🃏", "🎲", "🎯",
    "🏈", "🏀", "⚽", "⚾", "🎾", "🎱", "🏉", "🎳", "🏁", "🏇", "🏆", "🏊", "🏄", "☕", "🍼", "🍺",
    "🍷", "🍴", "🍕", "🍔", "🍟", "🍗", "🍱", "🍚", "🍜", "🍡", "🍳", "🍞", "🍩", "🍦", "🎂", "🍰",
    "🍪", "🍫", "🍭", "🍯", "🍎", "🍏", "🍊", "🍋", "🍒", "🍇", "🍉", "🍓", "🍑", "🍌", "🍐", "🍍",
    "🍆", "🍅", "🌽", "🏡", "🏥", "🏦", "⛪", "🏰", "⛺", "🏭", "🗻", "🗽", "🎠", "🎡", "⛲", "🎢",
    "🚢", "🚤", "⚓", "🚀", "✈", "🚁", "🚂", "🚋", "🚎", "🚌", "🚙", "🚗", "🚕", "🚛", "🚨", "🚔",
    "🚒", "🚑", "🚲", "🚠", "🚜", "🚦", "⚠", "🚧", "⛽", "🎰", "🗿", "🎪", "🎭", "🇯🇵", "🇰🇷", "🇩🇪",
    "🇨🇳", "🇺🇸", "🇫🇷", "🇪🇸", "🇮🇹", "🇷🇺", "🇬🇧", "1⃣", "2⃣", "3⃣", "4⃣", "5⃣", "6⃣", "7⃣", "8⃣", "9⃣", "0⃣",
    "🔟", "❗", "❓", "♥", "♦", "💯", "🔗", "🔱", "🔴", "🔵", "🔶", "🔷",
];

pub fn sha256(msg: &Vec<u8>) -> Vec<u8> {
    let mut hasher = Sha256::new();
    hasher.update(msg);
    let result = hasher.finalize();
    result.to_vec()
}

pub fn sha512(msg: &Vec<u8>) -> Vec<u8> {
    let mut hasher = Sha512::new();
    hasher.update(msg);
    let result = hasher.finalize();
    result.to_vec()
}

fn bytes_to_long(arr: &[u8], offset: usize) -> i128 {
    (((arr[offset] as i128) & 0x7F) << 56) as i128
        | (((arr[offset + 1] as i128) & 0xFF) << 48) as i128
        | (((arr[offset + 2] as i128) & 0xFF) << 40) as i128
        | (((arr[offset + 3] as i128) & 0xFF) << 32) as i128
        | (((arr[offset + 4] as i128) & 0xFF) << 24) as i128
        | (((arr[offset + 5] as i128) & 0xFF) << 16) as i128
        | (((arr[offset + 6] as i128) & 0xFF) << 8) as i128
        | ((arr[offset + 7] as i128) & 0xFF)
}

pub fn emojify(key: &[u8]) -> Vec<&str> {
    let mut emojified_key = Vec::new();
    for i in 0..4 {
        let index: u16 = (bytes_to_long(key, 8 * i) % (EMOJIS_LENGTH as i128)) as u16;
        emojified_key.push(EMOJIS[index as usize]);
    }

    emojified_key
}

pub fn print_emojified_key(emojified_key: &[&str]) {
    for x in emojified_key.iter().take(4) {
        print!("{}", x);
    }
    println!();
}
